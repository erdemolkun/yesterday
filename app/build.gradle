apply plugin: 'com.android.application'

android {
    //keytool -list -v -keystore debug.keystore -alias androiddebugkey -storepass android -keypass android
    compileSdkVersion 25
    buildToolsVersion '25.0.1'

    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file("${project.rootDir}/keystores/debug.keystore")
            storePassword 'android'
        }
        release
    }

    defaultConfig {
        applicationId "com.protel.yesterday"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 131
        versionName "1.3.1"
        buildConfigField "long", "BUILD_TIMESTAMP", System.currentTimeMillis() + "L"
    }
    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
//        checkReleaseBuilds false
//        // Or, if you prefer, you can continue to check for errors in release builds,
//        // but continue the build even when errors are found:
//        abortOnError false
    }
    buildTypes {

        debug {
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro',
                    'proguard-google-play-services.pro',
                    'proguard-appcompat-v7.pro',
                    'proguard-glide.pro'

            minifyEnabled true
            versionNameSuffix ' Alpha'
            applicationIdSuffix '.debug'
        }

        beta {
            minifyEnabled true
            proguardFiles = buildTypes.debug.proguardFiles
            versionNameSuffix ' Beta'
            signingConfig signingConfigs.debug

        }

        release {
            minifyEnabled true
            proguardFiles = buildTypes.debug.proguardFiles
            versionNameSuffix ' Beta'
            zipAlignEnabled true
            signingConfig signingConfigs.release

        }

        live {
            minifyEnabled true
            proguardFiles = buildTypes.debug.proguardFiles
            signingConfig signingConfigs.release

        }


    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:25.0.1'
    compile "com.google.android.gms:play-services-location:9.8.0"
    compile "com.google.android.gms:play-services-analytics:9.8.0"
    compile "com.android.support:design:25.0.1"
    compile 'com.facebook.rebound:rebound:0.3.8'
    // Glide library, used to handle asynchronous loading and caching of images.
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile project(':pronetwork')
    compile 'com.google.android.gms:play-services-appindexing:9.8.0'
}

def Properties propsSigning = new Properties()
def signingPropsFile = new File("${project.rootDir}/release.signing.properties")

if (signingPropsFile.canRead()) {
    propsSigning.load(new FileInputStream(signingPropsFile))

    if (propsSigning != null &&
            propsSigning.containsKey('STORE_FILE') &&
            propsSigning.containsKey('STORE_PASSWORD') &&
            propsSigning.containsKey('KEY_ALIAS') &&
            propsSigning.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(propsSigning['STORE_FILE'])
        android.signingConfigs.release.storePassword = propsSigning['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = propsSigning['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = propsSigning['KEY_PASSWORD']
    } else {
        println 'release.signing.properties file found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'release.signing.properties file not found'
    android.buildTypes.release.signingConfig = null
}
